#pragma once
#ifndef SRRDTSENDER_H
#define SRRDTSENDER_H
#include "RdtSender.h"
#include <vector>
class SRRdtSender :public RdtSender 
{
	bool waitingState;				// 是否处于等待Ack的状态
	int base;
	int nextseqnum;
	std::vector<Packet *> packets;
	std::vector<bool> flags; // 0代表未知，1代表确认
	void printWindow();
public:
	bool getWaitingState();
	bool send(const Message &message);						//发送应用层下来的Message，由NetworkServiceSimulator调用,如果发送方成功地将Message发送到网络层，返回true;如果因为发送方处于等待正确确认状态而拒绝发送Message，则返回false
	void receive(const Packet &ackPkt);						//接受确认Ack，将被NetworkServiceSimulator调用
	void timeoutHandler(int seqNum);					//Timeout handler，将被NetworkServiceSimulator调用
public:
	SRRdtSender() ;
	virtual ~SRRdtSender() ;
};


#endif // !SRRDTSENDER_H
